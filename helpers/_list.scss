////
/// @group Helpers
/// @author Joey Hoer
////

///
/// Checks if a value exists in a list
///
/// @param {mixed} $needle - The searched value
/// @param {list} $haystack - The list
///
@function in-list(
    $needle,
    $haystack
){
    @return not not index($haystack, $needle);
}

///
/// Removes all false and null values from $list
///
@function purge(
    $list
){
    $result: ();

    @each $item in $list {
        @if is-true($item) {
            $result: append($result, $item, list-separator($list));
        }
    }

    @return $result;
}

///
/// Replace a value(s) in a list
///
/// @param {list} $list - The list to work on
/// @param {mixed} $old - The value to be replaced
/// @param {mixed} $value - The value to replace with
///
@function replace(
    $list,
    $old,
    $value
){
      $running: true;

      @while $running {
            $index: index($list, $old);

            @if not $index {
                $running: false;
            }

            @else {
                $list: set-nth($list, $index, $value);
            }

      }

      @return if(not is-true($value), purge($list), $list);
}

///
/// Removes value(s) from a list
///
/// @param {list} $list - The list to work on
/// @param {mixed} $old - The value to be removed
///
@function remove(
    $list,
    $value
){
  @return replace($list, $value, null);
}

///
/// Replace value at index
///
/// @param {list} $list - The list to work on
/// @param {number} $index - The index of the item to be replaced
/// @param {mixed} $value - The value to replace with
///
@function replace-nth(
    $list,
    $index,
    $value
){
      @if type-of($index) != "number" or $index == 0 or abs($index) > length($list) {
            @warn "Invalid index (#{$index}) for `replace-nth`.";
            @return false;
      }

      $list: set-nth($list, $index, $value);
      @return if(not is-true($value), purge($list), $list);
}

///
/// Removes duplicate values from $list
///
/// @param {list} $list - The list to work on.
/// @param {bool} $recursive - If `true`, recursively search list
///
/// @return {list} - The list with elements remove
///
@function remove-duplicates(
    $list
){
    $result: ();

    @each $item in $list {
        @if not index($result, $item) {
            $result: append($result, $item, list-separator($list));
        }
    }

    @return $result;
}

///
/// Alias of `remove-duplicates`
///
@function unique(
    $list
){
    @return remove-duplicates($list);
}

///
/// Applies the callback to the elements of the given list
///
/// @param {list} $list - A list to run through the callback function.
/// @param {string} $callback - Callback function to run for each element in each list.
/// @param {argList} $args - Variable list of arguments to run through
///    the callback function.
///
/// @return {list} - A list containing all the elements of `$list` after applying the
///    callback function to each one.
///
@function list-walk (
    $list,
    $callback,
    $args...
){
    @if not function-exists($callback) {
        @warn "There is no `#{$callback}` function.";
        @return false;
    }

    @for $i from 1 through length($list) {
        $list: set-nth($list, $i, call($callback, nth($list, $i), $args...));
    }

    @return $list;
}

///
/// Return a single value if the list is only one element long, otherwise return the list
///
/// @param {list} $list - The list check for a single value
/// @return {list|mixed} - The first (only) value, if the list only contains one element,
///  otherwise the list
///
@function single-out($list){
  @return if(length($list) == 1, nth($list, 1), $list);
}

///
/// Tests whether a list is empty.
///
/// @param {List} $list - The list to run the test against
///
/// @example
/// is-empty(())
/// // true
///
/// @example
/// is-empty(a)
/// // false
///
/// @return {Bool}
///
@function is-empty($list) {
    @return length($list) == 0;
}

///
/// @requires is-empty
/// @alias is-empty
///
@function empty($list) {
    @return is-empty($list);
}
