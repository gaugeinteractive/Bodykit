//*
// Checks if a value exists in a list
//
// @param mixed $needle The searched value
// @param list $haystack The list
//
@function in-list($needle, $haystack){
    @return not not index($haystack, $needle);
}

//*
// Replace value at index
//
// @param list $list The list to work on
// @param number $index The index of the item to be replaced
// @param mixed $value The value to replace with
//
@function replace-nth($list, $index, $value) {
    $result: null;
    $separator: list-separator($list);

    @if type-of($index) != number {
        @warn "$index: #{quote($index)} is not a number for `replace-nth`.";
    }

    @else if $index == 0 {
        @warn "List index 0 must be a non-zero integer for `replace-nth`.";
    }

    @else if abs($index) > length($list) {
        @warn "List index is #{$index} but list is only #{length($list)} item long for `replace-nth`.";
    }

    @else {
        $result: ();
        $index: if($index < 0, length($list) + $index + 1, $index);  

        @for $i from 1 through length($list) {
            @if $i == $index {
                $result: append($result, $value, $separator);
            }

            @else {
                $result: append($result, nth($list, $i), $separator);
            }
        }
    }

    @return $result;
}

//*
// Removes duplicate values from $list
//
// @param list $list The list to work on.
// @param bool $recursive If `true`, recursively search list
//
// @return list
//
@function remove-duplicates(
    $list
){
    $result: ();

    @each $item in $list {
        @if not index($result, $item) {
            $result: append($result, $item, list-separator($list));
        }
    }

    @return $result;
}

// Alias of `remove-duplicates`
@function unique($list) {
    @return remove-duplicates($list);
}

//*
// Applies the callback to the elements of the given list
//
// @param list $list A list to run through the callback function.
// @param string $callback Callback function to run for each element in each list.
// @param list $args [default: null] Variable list of arguments to run through 
//    the callback function.
//
// @return A list containing all the elements of `$list` after applying the
//    callback function to each one. 
//
@function list-walk (
    $list,
    $callback,
    $arg: null
){

    $tmp: ();
    @each $item in $list {
        @if $arg { $tmp: append($tmp, call($callback, $item, $arg)); }
        @else    { $tmp: append($tmp, call($callback, $item)); }
    }
    @return $tmp;
}
