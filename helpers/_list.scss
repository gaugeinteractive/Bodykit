//*
// Checks if a value exists in a list
//
// @param mixed $needle The searched value
// @param list $haystack The list
//
@function in-list(
    $needle,
    $haystack
){
    @return not not index($haystack, $needle);
}

//*
// Removes all false and null values from $list
//
@function purge(
    $list
){
    $result: ();

    @each $item in $list {
        @if is-true($item) {
            $result: append($result, $item, list-separator($list));
        }
    }

    @return $result;
}

//*
// Replace a value(s) in a list
//
// @param list $list The list to work on
// @param mixed $old The value to be replaced
// @param mixed $value The value to replace with
//
@function replace(
    $list,
    $old,
    $value
){
      $running: true;

      @while $running {
            $index: index($list, $old);

            @if not $index {
                $running: false;
            }

            @else {
                $list: set-nth($list, $index, $value);
            }

      }

      @return if(not is-true($value), purge($list), $list);
}

//*
// Removes value(s) from a list
//
// @param list $list The list to work on
// @param mixed $old The value to be removed
//
@function remove(
    $list,
    $value
){
  @return replace($list, $value, null);
}

//*
// Replace value at index
//
// @param list $list The list to work on
// @param number $index The index of the item to be replaced
// @param mixed $value The value to replace with
//
@function replace-nth(
    $list,
    $index,
    $value
){
      @if type-of($index) != "number" or $index == 0 or abs($index) > length($list) {
            @warn "Invalid index (#{$index}) for `replace-nth`.";
            @return false;
      }

      $list: set-nth($list, $index, $value);
      @return if(not is-true($value), purge($list), $list);
}

//*
// Removes duplicate values from $list
//
// @param list $list The list to work on.
// @param bool $recursive If `true`, recursively search list
//
// @return list
//
@function remove-duplicates(
    $list
){
    $result: ();

    @each $item in $list {
        @if not index($result, $item) {
            $result: append($result, $item, list-separator($list));
        }
    }

    @return $result;
}

//
// Alias of `remove-duplicates`
//
@function unique(
    $list
){
    @return remove-duplicates($list);
}

//*
// Applies the callback to the elements of the given list
//
// @param list $list A list to run through the callback function.
// @param string $callback Callback function to run for each element in each list.
// @param list $args [default: null] Variable list of arguments to run through 
//    the callback function.
//
// @return A list containing all the elements of `$list` after applying the
//    callback function to each one. 
//
@function list-walk (
    $list,
    $callback,
    $arg: null
){

    $tmp: ();
    @each $item in $list {
        @if $arg { $tmp: append($tmp, call($callback, $item, $arg)); }
        @else    { $tmp: append($tmp, call($callback, $item)); }
    }
    @return $tmp;
}
