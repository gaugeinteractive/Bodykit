////
/// @group Mixins
/// @author Joey Hoer
////

// 'calc' or 'convert'
$media-to-method: calc;
$media-value: 0;

///
/// The keyword `from` is an alias for the default media feature
/// The keywords `to` and `through` are aliased to the opposite
/// of the default media feature
/// The keyword `to` is one less than the passed value, while depending upon wether it is greater
/// than or less than the preceding
///
/// @param {list} $query - The media query
///
@mixin media(
    $query
){
    @debug $media-value;
    // Store length for performance
    $len: length($query);

    // Store global media value
    $tmp-media-value: $media-value;

    // A single query uses the default media feature
    @if $len == 1 {
        $value: nth($query, 1);

        // Set global media value
        $media-value: $value !global;

        @media screen and (min-width: $value) {
            @content;
        }
    }
    @else {
        $mediaQuery: 'screen and ';

        $last: $len - ($len % 2);

        $i: 1;
        @while $i <= $last {
            $feature: nth($query, $i);
            $value:   nth($query, $i + 1);

            @if $feature == from {
                $feature: 'min-width';
                @if ($i + 3) <= $len
                    and nth($query, $i + 3) < $value {
                    $feature: 'max-width';
                }
            }
            @elseif in-list($feature, (to, through)) {

                @debug $media-value $value;
                $prefix: if($media-value >= $value, 'min-', 'max-');

                @if $feature == to  {

                    @if $media-to-method == calc {

                        $operand: "+";
                        @if $media-value <= $value {
                            $operand: "-";
                        }
                        $value: calc(#{$value} #{$operand} 1px);

                    }
                    @else {
                        // Do some conversion
                    }

                }

                $feature: $prefix+'width';
            }

            // Set global media value
            $media-value: $value !global;

            // Build query string
            $mediaQuery: $mediaQuery + "(#{$feature}: #{$value})";
            @if ($i + 1) != $last {
                $mediaQuery: $mediaQuery + 'and ';
            }

            // Move along
            $i: $i + 2;
        }

        // Print media query
        @media #{$mediaQuery} {
            @content;
        }

        // Reset global media value
        $media-value: $tmp-media-value !global;
    }
}


///
/// Media query for high resoultion displays
///
/// @param {number} $ratio [1.3] - The device pixel ratio for which the media query
/// should target
///
@mixin hd(
    $ratio: 1.3
){

    @media screen and (min-resolution: #{round(96 * $ratio)}dpi),
           screen and (-webkit-min-device-pixel-ratio: #{$ratio})
    {
        @content;
    }

}




// Constructed map
// (
//     (
//         media-type: all,
//         features:(
//             min-width: 100px, // if new > old replace
//             max-width: 100px, // if new < old replace
//         )
//     ),
//     () // A second query
// )
